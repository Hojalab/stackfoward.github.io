{"name":"Stackfoward.github.io","tagline":"stackfoward startup profile","body":"### Welcome to Stackfoward Company ``Profile.\r\nHere for you and your projects Were currentry using\r\nHMVC: an Introduction and Application\r\nby Barry Cogan18 May 2010166 Comments\r\n\r\nThis tutorial is an introduction to the Hierarchical Model View Controller(HMVC) pattern, and how it applies to web application development. For this tutorial, I will use examples provided from the CodeIgniter from Scratch series and demonstrate how HMVC can be a valuable modification to your development process. This introduction assumes you have an understanding of the Model View Controller (MVC) pattern. We suggest you read our introduction to MVC to get acquainted with the topic before tackling this tutorial.\r\n\r\nWhat is HMVC?\r\n\r\nHMVC is an evolution of the MVC pattern used for most web applications today. It came about as an answer to the salability problems apparent within applications which used MVC. The solution presented in the JavaWorld web site, July 2000, proposed that the standard Model, View, and Controller triad become layered into a \"hierarchy of parent-child MCV layers\". The image below illustrates how this works:\r\n\r\nEach triad functions independently from one another. A triad can request access to another triad via their controllers. Both of these points allow the application to be distributed over multiple locations, if needed. In addition, the layering of MVC triads allows for a more in depth and robust application development. This leads to several advantages which brings us to our next point.\r\nWhy should I use HMVC?\r\n\r\nKey advantages to implementing the HMVC pattern in your development cycle:\r\n\r\n    Modularization: Reduction of dependencies between the disparate parts of the application.\r\n    Organization: Having a folder for each of the relevant triads makes for a lighter work load.\r\n    Reusability: By nature of the design it is easy to reuse nearly every piece of code.\r\n    Extendibility: Makes the application more extensible without sacrificing ease of maintenance.\r\n\r\nThese advantages will allow you to get M.O.R.E out of your application with less headaches.\r\nSetting up HMVC in CodeIgniter\r\n\r\nTo add extra depth to the CodeIgniter from Scratch series, we will be viewing today's examples in CodeIgniter. I will lead us though the steps needed to get CodeIgniter working with HMVC. Once we're done with that, I'll provide a couple of examples. Let's begin!\r\nPreface\r\n\r\nTo run web applications, you need a web server on your computer if you are not working remotely. Here are recommendations with links to installation instructions:\r\n\r\n    Windows: XAMPP 1.7.3 – Installation Instructions\r\n    Mac: Turn on your \"Personal Web Sharing\" – Installation Instructions\r\n\r\nStep 1. Download and Install CodeIgniter\r\n\r\nGo to codeigniter.com and click the \"Download CodeIgniter\" link. If you know how to install it and want to skip past this step click here\r\n\r\nExtract the contents of the zip file to your web server's document root.\r\n\r\nRename the \"CodeIgniter_1.7.2\" folder to \"hmvcExample\".\r\n\r\nMove the \"hmvcExample/system/application\" folder to \"hmvcExample/application\". This is common practice with CodeIgniter. The purpose of doing this is to separate the application from the core of the framework. We should now have a directory that looks like the image below:\r\n\r\nOpen \"hmvcExample/application/config/config.php\" in your editor of choice.\r\n\r\nEdit the site base url to match the location of your install. In my case I would change\r\n1\r\n\t\r\n$config['base_url'] = \"http://example.com/\";\r\n\r\ninto\r\n1\r\n\t\r\n$config['base_url'] = \"http://localhost/hmvcExample/\";\r\n\r\nSave your changes and close \"hmvcExample/application/config/config.php\"\r\n\r\nTest that we have a working version of CodeIgniter. Open your browser and check your \"http://yourhost/hmvcExample/\".\r\nYou should be greeted with the \"Welcome to CodeIgniter\" screen below:\r\n\r\nThat's it! You have successfully downloaded and installed CodeIgniter. Now we will move on to making it work with the HMVC extension.\r\nStep 2. Download and Install HMVC Extension\r\n\r\nDownload version 5.2 of the modular extension from the CodeIgniter Wiki.\r\n\r\nIn the contents of the zip file are three php files:\r\n\r\nMove these three files into the \"hmvcExample/application/libraries/\" folder.\r\n\r\nRecheck your browser. You should still see the Welcome to CodeIgniter screen.\r\n\r\nIt's time to add the modules. Create the following directory structure \"application/modules/welcome/controllers/\".\r\n\r\nMove the \"application/controllers/welcome.php\" to \"application/modules/welcome/controllers/welcome.php\".\r\n\r\nRecheck your browser. You should still see the Welcome to CodeIgniter screen.\r\n\r\nCreate the folder \"application/modules/welcome/views/\"\r\n\r\nMove the \"application/views/welcome_message.php\" to \"application/modules/welcome/views/welcome_message.php\".\r\n\r\nDo a final check on your browser. You should still see the Welcome to CodeIgniter screen.\r\n\r\nThat's it! Modular Extensions is installed correctly.\r\nLogin Module Example\r\n\r\nNow that we have our HMVC enabled instance of CodeIgniter, I will demonstrate some short examples. For our first example I will show how you can apply user access restrictions to pages or entire modules.\r\n\r\nDownload and unzip CodeIgniter from Scratch Day 6 source files into your web server. You should end up with a folder called \"ci_day6/\" alongside our \"hmvcExample/\"\r\n\r\nCreate the \"login\" module in our \"hmvcExample/application\" directory. It should end up looking like this\r\n1\r\n2\r\n3\r\n\t\r\nhmvcExample/application/modules/login/controllers/\r\nhmvcExample/application/modules/login/models/\r\nhmvcExample/application/modules/login/views/\r\n\r\nCreate the \"site\" module in our \"hmvcExample/application\" directory. It should end up looking like this\r\n1\r\n2\r\n3\r\n\t\r\nhmvcExample/application/modules/site/controllers/\r\nhmvcExample/application/modules/site/models/\r\nhmvcExample/application/modules/site/views/\r\n\r\nTIP: When working with modules I keep a folder named RENAME with the three empty folders controllers, models and views. This saves me a little bit of time anytime I wish to create a new model.\r\n\r\nNow we copy over the login module files from \"ci_day6/\" to our \"hmvcExample/\".\r\n1\r\n2\r\n3\r\n4\r\n5\r\n\t\r\nci_day6/application/controllers/login.php\r\nci_day6/application/models/membership_model.php\r\nci_day6/application/views/login_form.php\r\nci_day6/application/views/signup_form.php\r\nci_day6/application/views/signup_successful.php\r\n\r\nCopy/Move each of the above files over as listed below\r\n1\r\n2\r\n3\r\n4\r\n5\r\n\t\r\nhmvcExample/application/modules/login/controllers/login.php\r\nhmvcExample/application/modules/login/models/membership_model.php\r\nhmvcExample/application/modules/login/views/login_form.php\r\nhmvcExample/application/modules/login/views/signup_form.php\r\nhmvcExample/application/modules/login/views/signup_successful.php\r\n\r\nNext we copy over the site module files from \"ci_day6/\" to our \"hmvcExample/\".\r\n1\r\n2\r\n\t\r\nci_day6/application/controllers/site.php\r\nci_day6/application/views/logged_in_area.php\r\n\r\nCopy/Move each of the above files over as listed below\r\n1\r\n2\r\n\t\r\nhmvcExample/application/modules/site/controllers/site.php\r\nhmvcExample/application/modules/site/views/logged_in_area.php\r\n\r\nThe last files to copy over are the global views and CSS and image files. The asterisk (*) denotes folder and all its contents including sub folders\r\n1\r\n2\r\n3\r\n\t\r\nci_day6/css/*\r\nci_day6/img/*\r\nci_day6/application/views/includes/*\r\n\r\nCopy each of the above folders and all their content over as listed below\r\n1\r\n2\r\n3\r\n\t\r\nhmvcExample/css/*\r\nhmvcExample/img/*\r\nhmvcExample/application/views/includes/*\r\n\r\nOpen \"hmvcExample/application/config/autoload.php\" and edit it to look like the this:\r\n01\r\n02\r\n03\r\n04\r\n05\r\n06\r\n07\r\n08\r\n09\r\n10\r\n11\r\n12\r\n13\r\n\t\r\n$autoload['libraries'] = array('database', 'session');  // Need to Autoload DB and Session\r\n \r\n \r\n/*\r\n| -------------------------------------------------------------------\r\n|  Auto-load Helper Files\r\n| -------------------------------------------------------------------\r\n| Prototype:\r\n|\r\n|   $autoload['helper'] = array('url', 'file');\r\n*/\r\n \r\n$autoload['helper'] = array('url', 'form');     // Need to autoload url and form.\r\n\r\nIf you have not already done so from step one, open \"hmvcExample/application/config/config.php\" and edit it so that the base url is set to your appropriate location.\r\n1\r\n\t\r\n$config['base_url'] = \"http://localhost/hmvcExample/\";  // web address. WARNING keep trailing /\r\n\r\nOpen \"hmvcExample/application/config/database.php\" and add the appropriate links to your database.\r\n1\r\n2\r\n3\r\n4\r\n\t\r\n$db['default']['hostname'] = \"localhost\";       // location of DB server\r\n$db['default']['username'] = \"YOUR USERNAME HERE\";  // username you use to connect\r\n$db['default']['password'] = \"YOUR PASSWORD HERE\";  // associated password\r\n$db['default']['database'] = \"ci_series\";       // The database you want to use\r\n\r\nOpen your browser to test that the login page displays \"http://localhost/hmvcExample/index.php/login\"\r\n\r\nNow to make this login function, we need to create the membership database table. For this, we need to create a table in your PHPMyAdmin.\r\n\r\nSelect or create your \"ci_series\" database.\r\n\r\nIn the sQL tab, paste the code below into the textarea and click go\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n\t\r\nCREATE TABLE  `ci_series`.`membership` (\r\n`id` INT( 11 ) NOT NULL AUTO_INCREMENT PRIMARY KEY ,\r\n`first_name` VARCHAR( 32 ) NOT NULL ,\r\n`last_name` VARCHAR( 32 ) NOT NULL ,\r\n`email_address` VARCHAR( 64 ) NOT NULL ,\r\n`username` VARCHAR( 32 ) NOT NULL ,\r\n`password` VARCHAR( 32 ) NOT NULL\r\n) ENGINE = MYISAM ;\r\n\r\nWith the membership table created, we click on the create account link on the login page and add a user to the database.\r\n\r\nLogin in as the user and confirm that you are now in the \"site/members_area\" of the site. It should look similar to the image below:\r\n\r\nClick \"logoff\" link and try to manually go back to the members area. you will see that you no longer have permission to do so.\r\n\r\nSo we have our triads grouped, but we are still not quite in HMVC mode yet. In the site controller we find a function called is_logged_in().\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n\t\r\nfunction is_logged_in()\r\n{\r\n    $is_logged_in = $this->session->userdata('is_logged_in');\r\n    if(!isset($is_logged_in) || $is_logged_in != true)\r\n    {\r\n        echo 'You don\\'t have permission to access this page. <a href=\"../login\">Login</a>';   \r\n        die();     \r\n    }      \r\n}\r\n\r\nThis is a login related function. In MVC mode, this is required because site cannot access login. With HMVC we can fix this.\r\n\r\nCut the is_logged_in() function out of \"applications/modules/site/controllers/site.php\"\r\n\r\nSave site.php without the is_logged_in() function.\r\n\r\nOpen \"applications/modules/login/controllers/login.php\".\r\n\r\nPaste the is_logged_in() function into the class.\r\n\r\nSave login.php\r\n\r\nOpen \"applications/modules/site/controllers/site.php\".\r\n1\r\n2\r\n3\r\n4\r\n5\r\n\t\r\nfunction __construct()\r\n{\r\n    parent::Controller();\r\n    $this->is_logged_in();\r\n}\r\n\r\nIn the __Construct() function, we make the HMVC call to login's is_logged_in() function, as seen below:\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n\t\r\nfunction __construct()\r\n{\r\n    parent::Controller();\r\n    // Format: modules::run('module/controller/action', $param1, $param2, .., $paramN);\r\n    modules::run('login/is_logged_in');\r\n}\r\nMVC 101 Complete\r\n\r\nThere you have it! We have successfully altered day six code into HMVC format. The site module now requests the login check instead of having to use its own. While outwardly we observe no difference, the site design has fundamentally been changed. All login functions are now where they belong: inside the login triad. This may seem like a lot of work with small reward but it is not so. Any login changes can be made once. The internal structure of the triad can be edited without having to change the entire application in response. Code replication for other controllers is no longer required. Last but not least, all the related code is in one handy location. This tiny step may not WOW you but when we delve deeper into bigger, complex applications, the M.O.R.E. apparent it will become how effective the HMVC pattern is.\r\nMembers Section Example\r\n\r\nWe are now going to uncover more of HMVC's power. We just demonstrated how to call a module from a controller. There are other places you can do that as well. HMVC was build with the User Interface (UI) in mind. We get to call modules from our views as a result. This is where the power of HMVC can really shine.\r\n\r\nWhen calling HMVC from a view you will use the same modules::run(). There is only one requirement when doing this. The resulting output from the call must be a html snippet and not a complete view. This is because we are already inside a view at the time we call the run function. We will see this in action down the page as we edit the site module views.\r\nStep 1. Edit Login Controller\r\n\r\nWe are going to create a block which appears on the top of every page with our user's name, important links, and logout option. Widgets like this are commonplace on sites today. The image below illustrates the end result.\r\n\r\nOpen \"applications/modules/login/controllers/login.php\".\r\n01\r\n02\r\n03\r\n04\r\n05\r\n06\r\n07\r\n08\r\n09\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n\t\r\nfunction cp()\r\n{\r\n    if( $this->session->userdata('username') )\r\n    {\r\n        // load the model for this controller\r\n        $this->load->model('membership_model');\r\n        // Get User Details from Database\r\n        $user = $this->membership_model->get_member_details();\r\n        if( !$user )\r\n        {\r\n            // No user found\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            // display our widget\r\n            $this->load->view('user_widget', $user);\r\n        }          \r\n    }\r\n    else\r\n    {\r\n        // There is no session so we return nothing\r\n        return false;\r\n    }\r\n}\r\n\r\nPaste/Write the code above into the login controller.\r\n\r\ncp() receives information from the membership_model function, get_member_details(), which we create in the next step. If a user is found we will display the view snippet detailed in step three. From there we should get the desired block illustrated above.\r\n\r\nSave the changes you made to login.php\r\nStep 2. Edit Membership Model\r\n\r\nYou will notice that we called a get_member_details() from the membership_model. This function gets our user information from the database and will be accessed from a few different sources. We are going to work on that now.\r\n\r\nOpen \"applications/modules/login/models/membership_model.php\".\r\n01\r\n02\r\n03\r\n04\r\n05\r\n06\r\n07\r\n08\r\n09\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n\t\r\nfunction get_member_details($id=false)\r\n{\r\n    if( !$id )\r\n    {\r\n        // Set Active Record where to the current session's username\r\n        if( $this->session->userdata('username') )\r\n        {\r\n            $this->db->where('username', $this->session->userdata('username'));\r\n        }\r\n        else\r\n        {\r\n            // Return a non logged in person from accessing member profile dashboard\r\n            return false;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // get the user by id\r\n        $this->db->where('id', $id);\r\n    }\r\n    // Find all records that match this query\r\n    $query = $this->db->get('membership');\r\n    // In this case because we don't have a check set for unique username\r\n    // we will return the last user created with selected username.\r\n    if($query->num_rows() > 0)\r\n    {\r\n        // Get the last row if there are more than one\r\n        $row = $query->last_row();\r\n        // Assign the row to our return array\r\n        $data['id'] = $row->id;\r\n        $data['first_name'] = $row->first_name;\r\n        $data['last_name'] = $row->last_name;\r\n        // Return the user found\r\n        return $data;\r\n    }\r\n    else\r\n    {\r\n        // No results found\r\n        return false;\r\n    }\r\n\r\n    Comment your code! It's a best practice and will help others understand what you wrote.\r\n\r\nLine 01: The function call has a default variable $id. This allows us an option of finding a user by ID rather than by username. This made optional by setting it to false in the declaration.\r\n\r\nThe rest of the function is straight forward and well commented. We query the membership table for a user via username or ID. The result is saved to the $data array and returned. All other outcomes return false.\r\n\r\nSave the changes you made to membership_model.php\r\nStep 3. Create User Widget View\r\n\r\nThe third and final piece to the widget we are creating is the xhtml snippet, which we can put into any other view. This is called by the login controller's cp() function which we just wrote.\r\n\r\nOpen \"applications/modules/login/views/user_widget.php\".\r\n01\r\n02\r\n03\r\n04\r\n05\r\n06\r\n07\r\n08\r\n09\r\n10\r\n11\r\n12\r\n13\r\n14\r\n\t\r\n<code style=\"font-family: Monaco, Verdana, Sans-serif;\r\n                 font-size: 12px;\r\n                 background-color: #f9f9f9;\r\n                 border: 1px solid #D0D0D0;\r\n                 color: #002166;\r\n                 display: block;\r\n                 margin: 14px 0 14px 0;\r\n                 padding: 12px 10px 12px 10px;\">\r\n    <?php echo $first_name.' '.$last_name; ?> &middot;\r\n    <?php echo anchor('site/members_area', 'Dashboard'); ?> |\r\n    <?php echo anchor('site/profile/'.$id, 'Profile'); ?> |\r\n    <?php echo anchor('site/messages/'.$id, 'Messages'); ?> |\r\n    <?php echo anchor('login/logout', 'Logout'); ?>\r\n</code>\r\n\r\nNote: It is not a good practice to use inline styling. I opted to put this one instance of inline style for the sake of remaining on topic.\r\n\r\nThis styled code block takes the information passed from the cp() function. We generate the links using CodeIgniter's URL helper's anchor() function. More information about the user guide can be found on codeigniter.com.\r\n\r\nAfter working on those three files we will test the \"login/cp\" page. We should see something like the image below. Note: You need to be logged int to see it. Be sure to do so before checking the page or you will see nothing.\r\nStep 4. Edit Site Controller\r\n\r\nThe links in the snippet to profile and messages will return an error for the moment. This is ok because we have not created those functions yet. Lets do that now.\r\n\r\nOpen \"applications/modules/site/controllers/site.php\".\r\n01\r\n02\r\n03\r\n04\r\n05\r\n06\r\n07\r\n08\r\n09\r\n10\r\n11\r\n12\r\n13\r\n\t\r\n<?php\r\nclass Site extends Controller\r\n{\r\n    function __construct()\r\n    {\r\n        parent::Controller();\r\n    }\r\n \r\n    function members_area()\r\n    {\r\n        modules::run('login/is_logged_in');\r\n        $this->load->view('logged_in_area');\r\n    }\r\n\r\n__construct()\r\nFor the purpose of this example we shall remove the...\r\n1\r\n\t\r\nmodules::run('login/is_logged_in');\r\n\r\n...from the function so that we can make specific parts private and have other parts public.\r\n\r\nmembers_area()\r\nWe want only logged in users to access the members dashboard area. So we will use the modules:run HMVC function and call the is_logged_in check from the login controller. We then load the logged_in_area view file which will be edited further down the page.\r\n01\r\n02\r\n03\r\n04\r\n05\r\n06\r\n07\r\n08\r\n09\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n\t\r\nfunction messages()\r\n{\r\n    modules::run('login/is_logged_in');\r\n    $this->load->model('login/membership_model');\r\n    $user = $this->membership_model->get_member_details($this->uri->segment(3));\r\n    if( !$user )\r\n    {\r\n        // No user found\r\n        return false;\r\n    }\r\n    else\r\n    {\r\n        // display our widget\r\n        $this->load->view('member_messages', $user);\r\n    }              \r\n}\r\n\r\nmessages()\r\nLike members_area(), we only want logged in users so we have included the is_logged_in check. We have already written the code on how to get user details from the database so we will load the login model, membership_model. This will allow us to get the user information via the get_member_details() function. The third URI segment being passed into that function is an id for the user we wish to get messages for. For example, if the url was:\r\n1\r\n\t\r\nhttp://localhost/hmvcExample/index.php/site/messages/43\r\n\r\nThen our function get_member_details() would be receiving \"43\" as an input variable. Depending on the result of get_member_details(), we are either shown the view: member_messages or we get nothing (as a result of a failed query).\r\n01\r\n02\r\n03\r\n04\r\n05\r\n06\r\n07\r\n08\r\n09\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n\t\r\n    function profile()\r\n    {\r\n        $this->load->model('login/membership_model');\r\n        $user = $this->membership_model->get_member_details($this->uri->segment(3));\r\n        if( !$user )\r\n        {\r\n            // No user found\r\n            $data['main_content'] = 'member_profile';\r\n            $data['notice'] = 'you need to view a profile id';\r\n            $this->load->view('includes/template', $data);\r\n        }\r\n        else\r\n        {\r\n            // display our widget\r\n            $user['main_content'] = 'member_profile';\r\n            $this->load->view('includes/template', $user);\r\n        }      \r\n    }\r\n}\r\n\r\nprofile()\r\nJust like any social network; we want the profile pages to be public. So we have not included the is_logged_in check. Just like messages, we call the login triad's membership_model and query the database for our desired user. In this case, if no user is found, we quit a bit more gracefully. We also notify the visitor that an id needs to be specified. With a successful result, we see the member's profile.\r\nStep 5 Edit Logged In Area View\r\n\r\nOpen \"applications/modules/site/views/logged_in_area.php\".\r\n01\r\n02\r\n03\r\n04\r\n05\r\n06\r\n07\r\n08\r\n09\r\n10\r\n11\r\n12\r\n\t\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n    <title>untitled</title>\r\n</head>\r\n<body>\r\n    <?php echo modules::run('login/cp');?>\r\n    <h2>Welcome Back, <?php echo $this->session->userdata('username'); ?>!</h2>\r\n     <p>This section represents the area that only logged in members can access.</p>\r\n</body>\r\n</html>\r\n\r\nOverwrite the contents of the file with the code above.\r\n\r\nLine 08: HMVC is put into action here. Our view calls the \"login/cp\" function, and echoes out the html snippet exactly where we tell it. Notice how we didn't have to prepare anything ourselves? It's all handled internally by login for us. Handy isn't it?\r\n\r\nSave the changes you made to logged_in_area.php. Your finished page should display like:\r\nStep 6. Create Member Messages View\r\n\r\nCreate a new view: \"applications/modules/site/views/member_messages.php\".\r\n01\r\n02\r\n03\r\n04\r\n05\r\n06\r\n07\r\n08\r\n09\r\n10\r\n11\r\n12\r\n\t\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n    <title>untitled</title>\r\n</head>\r\n<body>\r\n    <?php echo modules::run('login/cp');?>\r\n    <h2><?php echo $first_name; ?>'s Messages</h2>\r\n     <p>This could be where the messaging system gets displayed</p>\r\n</body>\r\n</html>\r\n\r\nWrite or paste the code above into the newly created file.\r\n\r\nThis view is pretty much just a clone of the members area to test that login holds on multiple pages. There is one difference: we fished some information from the login module's membership_model. This is shown as the $first_name variable.\r\n\r\nThe point of getting user information here would be to pass it on to a module which would return a snippet with the user's messages.\r\n\r\nSave the changes you made to member_messages.php. Your finished page should display like:\r\nStep 7. Create Member Profile View\r\n\r\nCreate a new view: \"applications/modules/site/views/member_profile.php\".\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n\t\r\n<?php echo modules::run('login/cp');?>\r\n<?php if( isset($notice) ): ?>\r\n<h2>Member Profile Pages</h2>\r\n<p><?php echo $notice; ?></p>\r\n<?php else: ?>\r\n<h2><?php echo $first_name; ?>'s Profile</h2>\r\n <p>Put all the good wholesome profile info here!</p>\r\n<?php endif; ?>\r\n\r\nWrite or paste the code above into the newly created file.\r\n\r\nWe have an if statement which detects whether a user was found or not. If not, we get brought to an error page stating we need an ID to view a profile.\r\n\r\nAgain, we retrieve the user information. Just like messages we would use this to retrieve the user's friend list, latest blog entry, and activity feed, etc.\r\n\r\nSave the changes you made to member_profile.php. Your finished page should display like:\r\nAdvertisement\r\nWhat Happens When We Logoff?\r\n\r\nBecause we want the profile pages to be public, it should still display. Minus the user widget of course.\r\n\r\nWhen logged in, and we go to profile without a third uri segment we see our own profile. Logded off, we will be shown the error below.\r\n\r\nWe should not be able to view the message or dashboard. When we check the messages page we are greeted with this:\r\nWe're Done\r\n\r\nThat's it! We have added more depth to our initial example and demonstrated the different ways to use HMVC.\r\n\r\n    Call modules::run() from a controller.\r\n    Echo modules::run() from a view to display a HTML snippet.\r\n    Load a model from another module.\r\n\r\nI hope this has been an enlightening experience. HMVC is an extraordinary pattern which makes applications more robust. It is well worth the investment. Give it a try. I promise you won't ever want to go back to vanilla MVC!\r\n","google":"W","note":"Don't delete this file! It's used internally to help with page regeneration."}